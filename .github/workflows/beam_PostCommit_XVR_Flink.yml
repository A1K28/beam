# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: PostCommit XVR Flink

on:
  schedule:
    - cron: '30 5/6 * * *'
  pull_request_target:
    paths: ['release/trigger_all_tests.json', '.github/trigger_files/beam_PostCommit_XVR_Flink.json']
  workflow_dispatch:

permissions:
  actions: write
  pull-requests: write
  checks: write
  contents: read
  deployments: read
  id-token: none
  issues: read
  discussions: read
  packages: read
  pages: read
  repository-projects: read
  security-events: read
  statuses: read

concurrency:
  group: '${{ github.workflow }} @ ${{ github.event.issue.number || github.sha || github.head_ref || github.ref }}-${{ github.event.schedule || github.event.comment.id || github.event.sender.login }}'
  cancel-in-progress: true

env:
  DEVELOCITY_ACCESS_KEY: ${{ secrets.DEVELOCITY_ACCESS_KEY }}
  GRADLE_ENTERPRISE_CACHE_USERNAME: ${{ secrets.GE_CACHE_USERNAME }}
  GRADLE_ENTERPRISE_CACHE_PASSWORD: ${{ secrets.GE_CACHE_PASSWORD }}
  FlinkVersion: 1.19

jobs:
  beam_PostCommit_XVR_Flink:
    if: |
      github.event_name == 'workflow_dispatch' ||
      github.event_name == 'pull_request_target' ||
      (github.event_name == 'schedule' && github.repository == 'apache/beam') ||
      github.event.comment.body == 'Run XVR_Flink PostCommit'
    runs-on: [self-hosted]
    timeout-minutes: 100
    name: ${{ matrix.job_name }} (${{ matrix.job_phrase }} ${{ matrix.python_version }})
    strategy:
      matrix:
        job_name: ["beam_PostCommit_XVR_Flink"]
        job_phrase: ["Run XVR_Flink PostCommit"]
        python_version: ['3.9','3.12']
    steps:
      - uses: actions/checkout@v4

      - name: Setup repository
        uses: ./.github/actions/setup-action
        with:
          comment_phrase: ${{ matrix.job_phrase }} ${{ matrix.python_version }}
          github_token: ${{ secrets.GITHUB_TOKEN }}
          github_job: ${{ matrix.job_name }} (${{ matrix.job_phrase }} ${{ matrix.python_version }})

      - name: Wait for Docker and sanity check
        run: |
          for i in {1..10}; do
            if docker info >/dev/null 2>&1; then
              echo "Docker is up"
              break
            else
              echo "Docker not ready yet, retrying ($i/10)..."
              sleep 3
            fi
          done
          echo "=== docker version ==="
          docker version || true
          echo "=== docker info ==="
          docker info || true
          echo "=== docker ps -a ==="
          docker ps -a || true
          echo "=== Disk and memory diagnostics ==="
          df -h || true
          free -m || true
          echo "=== Docker socket permissions ==="
          ls -l /var/run/docker.sock || true

      - name: Setup environment
        uses: ./.github/actions/setup-environment-action
        with:
          go-version: default
          java-version: default
          python-version: ${{ matrix.python_version }}

      - name: Setup docker buildx builder
        run: |
          # create and switch to a buildx builder that supports --load
          docker buildx create --name beam-builder --use || true
          docker buildx inspect --bootstrap
          echo "Active builder:"
          docker buildx ls


      - name: run PostCommit XVR Flink script with retries and verbose docker-licensing steps
        env:
          CLOUDSDK_CONFIG: ${{ env.KUBELET_GCLOUD_CONFIG_PATH}}
        run: |
          set -euo pipefail
          # Pre-clean any possible conflicting containers/images that might trigger exit 125
          echo "Cleaning up stale Docker containers/images (if safe)..."
          docker container prune --force || true
          docker image prune -a --filter "dangling=true" || true

          # Define the gradle invocation including the cross-language runner validation,
          # but run the go-licenses docker-related tasks explicitly with verbosity and retry on 125.
          GRADLE_CMD="./gradlew :runners:flink:${FlinkVersion}:job-server:validatesCrossLanguageRunner -PpythonVersion=${{ matrix.python_version }} -PskipNonPythonTask=${{ (matrix.python_version == '3.9' && true) || false }}"

          echo "Running main validation step:"
          $GRADLE_CMD --info --stacktrace || true  # allow fallback to inspect

          # Now explicitly run the suspect docker tasks with retry on exit 125
          for attempt in 1 2; do
            echo "Running docker license tasks attempt #$attempt"
            ./gradlew :release:go-licenses:java:docker :release:go-licenses:py:docker --info --stacktrace || status=$?; \
            if [ "${status:-0}" -eq 0 ]; then
              echo "go-licenses docker tasks succeeded"
              break
            fi
            echo "go-licenses docker tasks exited with code ${status}"
            if [ "${status}" -eq 125 ] && [ "$attempt" -lt 2 ]; then
              echo "Exit 125 detected; retrying after short sleep"
              sleep 5
              continue
            fi
            echo "Final failure of go-licenses docker tasks, dumping docker diagnostics"
            echo "=== docker ps -a ==="
            docker ps -a || true
            echo "=== docker logs of recent containers (if any) ==="
            for cid in $(docker ps -a -q | head -n 5); do
              echo "--- logs for container $cid ---"
              docker logs "$cid" || true
            done
            exit $status
          done
        shell: bash

      - name: Archive JUnit Test Results
        uses: actions/upload-artifact@v4
        if: ${{ !success() }}
        with:
          name: JUnit Test Results
          path: "**/build/reports/tests/"

      - name: Publish JUnit Test Results
        uses: EnricoMi/publish-unit-test-result-action@v2
        if: always()
        with:
          commit: '${{ env.prsha || env.GITHUB_SHA }}'
          comment_mode: ${{ github.event_name == 'issue_comment'  && 'always' || 'off' }}
          files: '**/build/test-results/**/*.xml'
          large_files: true