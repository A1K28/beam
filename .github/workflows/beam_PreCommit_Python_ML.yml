# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: PreCommit Python ML tests with ML deps installed
on:
  pull_request_target:
    branches: [ "master", "release-*" ]
    paths: [ "model/**","sdks/python/**","release/**", 'release/trigger_all_tests.json', '.github/trigger_files/beam_PreCommit_Python_ML.json']
  issue_comment:
    types: [created]
  push:
    tags: ['v*']
    branches: ['master', 'release-*']
    paths: [ "model/**","sdks/python/**","release/**",".github/workflows/beam_PreCommit_Python_ML.yml"]
  schedule:
    - cron: '45 2/6 * * *'
  workflow_dispatch:

permissions:
  actions: write
  pull-requests: write
  checks: write
  contents: read
  deployments: read
  id-token: none
  issues: write
  discussions: read
  packages: read
  pages: read
  repository-projects: read
  security-events: read
  statuses: read

concurrency:
  group: '${{ github.workflow }} @ ${{ github.event.issue.number || github.event.pull_request.head.label || github.sha || github.head_ref || github.ref }}-${{ github.event.schedule || github.event.comment.id || github.event.pull_request.user.login }}'
  cancel-in-progress: true

env:
  DEVELOCITY_ACCESS_KEY: ${{ secrets.DEVELOCITY_ACCESS_KEY }}
  GRADLE_ENTERPRISE_CACHE_USERNAME: ${{ secrets.GE_CACHE_USERNAME }}
  GRADLE_ENTERPRISE_CACHE_PASSWORD: ${{ secrets.GE_CACHE_PASSWORD }}
  ALLOYDB_PASSWORD: ${{ secrets.ALLOYDB_PASSWORD }}

jobs:
  beam_PreCommit_Python_ML:
    name: ${{ matrix.job_name }} (${{ matrix.job_phrase }} ${{ matrix.python_version }})
    runs-on: ${{ matrix.os }}
    timeout-minutes: 180
    strategy:
      fail-fast: false
      matrix:
        job_name: ['beam_PreCommit_Python_ML']
        job_phrase: ['Run Python_ML PreCommit']
        python_version: ['3.9','3.10','3.11','3.12']
        # Run on both self-hosted and GitHub-hosted runners.
        # Some tests (marked require_docker_in_docker) can't run on Beam's
        # self-hosted runners due to Docker-in-Docker environment constraint.
        # These tests will only execute on ubuntu-latest (GitHub-hosted).
        # Context: https://github.com/apache/beam/pull/35585
        # Temporary removed the ubuntu-latest env till resolving deps issues.
        os: [[self-hosted, ubuntu-20.04, main]]
    if: |
      github.event_name == 'push' ||
      github.event_name == 'pull_request_target' ||
      (github.event_name == 'schedule' && github.repository == 'apache/beam') ||
      github.event_name == 'workflow_dispatch' ||
      startsWith(github.event.comment.body, 'Run Python_ML PreCommit')
    steps:
      - uses: actions/checkout@v4

      - name: Setup repository
        uses: ./.github/actions/setup-action
        with:
          comment_phrase: ${{ matrix.job_phrase }} ${{ matrix.python_version }}
          github_token: ${{ secrets.GITHUB_TOKEN }}
          github_job: ${{ matrix.job_name }} (${{ matrix.job_phrase }} ${{ matrix.python_version }})

      - name: Setup environment
        uses: ./.github/actions/setup-environment-action
        with:
          java-version: default
          python-version: ${{ matrix.python_version }}

      - name: Set PY_VER_CLEAN
        id: set_py_ver_clean
        run: |
          PY_VER=${{ matrix.python_version }}
          PY_VER_CLEAN=${PY_VER//.}
          echo "py_ver_clean=$PY_VER_CLEAN" >> $GITHUB_OUTPUT

      - name: Activate GCP service account (with SDK)
        id: gcp_setup
        uses: ./.github/actions/activate-service-account-json
        with:
          service_account_key: ${{ secrets.GCP_SA_KEY }}

      - name: Bootstrap deterministic Python deps
        # This conditional ensures the step only runs for Python versions 3.9, 3.10, and 3.11.
        if: matrix.python_version < '3.12'
        run: |
          set -euo pipefail
          python -m pip install --upgrade pip setuptools wheel
          # Clear any leftover cache that might cause ABI mismatch
          pip cache purge || true
          # Install numpy first with version choices per Python
          if [[ "${{ matrix.python_version }}" == "3.11" ]]; then
            # datatable pins numpy==1.21.3 which is incompatible with 3.11, so skip installing datatable.
            pip install "numpy>=1.24,<2" 
          else
            # Use a stable numpy/pandas pair for 3.9/3.10 (adjust if your known-good run had different)
            pip install "numpy==1.23.5"
          fi
          # Force reinstall pandas against the installed numpy
          pip install --no-cache-dir --force-reinstall "pandas<2.3,>=1.4.3"
          # For non-3.11, allow datatable if itâ€™s needed; on 3.11 we skip it to avoid impossible numpy constraint.
          if [[ "${{ matrix.python_version }}" == "3.9" || "${{ matrix.python_version }}" == "3.10" ]]; then
            pip install "datatable==1.1.0" || echo "datatable install failed, letting downstream resolution handle it"
          fi
          # Snapshot key versions for visibility
          echo "=== version snapshot ==="
          python -c "import numpy; print('numpy', numpy.__version__)"
          python -c "import pandas; print('pandas', pandas.__version__)"
          python -c "import sys; print('python', sys.version.split()[0])"

      - name: Run pythonPreCommit
        uses: ./.github/actions/gradle-command-self-hosted-action
        with:
          gradle-command: :sdks:python:test-suites:tox:py${{steps.set_py_ver_clean.outputs.py_ver_clean}}:testPy${{steps.set_py_ver_clean.outputs.py_ver_clean}}ML
          arguments: |
            -Pposargs="${{
              contains(matrix.os, 'self-hosted') &&
              'apache_beam/ml/ -m (not require_docker_in_docker)' ||
                'apache_beam/ml/ -m require_docker_in_docker'
            }}" \
            -PpythonVersion=${{ matrix.python_version }}

      - name: Archive Python Test Results
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: Python ${{ matrix.python_version }} Test Results
          path: '**/pytest*.xml'

      - name: Publish Python Test Results
        uses: EnricoMi/publish-unit-test-result-action@v2
        if: always()
        with:
          commit: '${{ env.prsha || env.GITHUB_SHA }}'
          comment_mode: ${{ github.event_name == 'issue_comment'  && 'always' || 'off' }}
          files: '**/pytest*.xml'
          large_files: true