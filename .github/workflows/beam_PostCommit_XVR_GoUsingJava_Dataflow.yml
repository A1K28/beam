
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# TODO(https://github.com/apache/beam/issues/32492): re-enable the suite
# on cron and add release/trigger_all_tests.json to trigger path once fixed.

name: PostCommit XVR GoUsingJava Dataflow (DISABLED)

on:
  # schedule:
  #  - cron: '45 5/6 * * *'
  pull_request_target:
    paths: ['.github/trigger_files/beam_PostCommit_XVR_GoUsingJava_Dataflow.json']
  workflow_dispatch:

#Setting explicit permissions for the action to avoid the default permissions which are `write-all` in case of pull_request_target event
permissions:
  actions: write
  pull-requests: write
  checks: write
  contents: read
  deployments: read
  id-token: none
  issues: write
  discussions: read
  packages: read
  pages: read
  repository-projects: read
  security-events: read
  statuses: read

# This allows a subsequently queued workflow run to interrupt previous runs
concurrency:
  group: '${{ github.workflow }} @ ${{ github.event.issue.number || github.sha || github.head_ref || github.ref }}-${{ github.event.schedule || github.event.comment.id || github.event.sender.login }}'
  cancel-in-progress: true

env:
  DEVELOCITY_ACCESS_KEY: ${{ secrets.DEVELOCITY_ACCESS_KEY }}
  GRADLE_ENTERPRISE_CACHE_USERNAME: ${{ secrets.GE_CACHE_USERNAME }}
  GRADLE_ENTERPRISE_CACHE_PASSWORD: ${{ secrets.GE_CACHE_PASSWORD }}

jobs:
  beam_PostCommit_XVR_GoUsingJava_Dataflow:
    if: |
      github.event_name == 'workflow_dispatch' ||
      github.event_name == 'pull_request_target' ||
      (github.event_name == 'schedule' && github.repository == 'apache/beam') ||
      github.event.comment.body == 'Run XVR_GoUsingJava_Dataflow PostCommit'
    runs-on: [self-hosted, ubuntu-20.04, main]
    timeout-minutes: 100
    name: ${{ matrix.job_name }} (${{ matrix.job_phrase }})
    strategy:
      matrix:
        job_name: ["beam_PostCommit_XVR_GoUsingJava_Dataflow"]
        job_phrase: ["Run XVR_GoUsingJava_Dataflow PostCommit"]
    steps:
      - uses: actions/checkout@v4
      - name: Setup repository
        uses: ./.github/actions/setup-action
        with:
          comment_phrase: ${{ matrix.job_phrase }}
          github_token: ${{ secrets.GITHUB_TOKEN }}
          github_job: ${{ matrix.job_name }} (${{ matrix.job_phrase }})

      - name: Set up Java 8 for xlang extension
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '8'
          cache: 'gradle'

      - name: Setup environment
        uses: ./.github/actions/setup-environment-action
        with:
          java-version: default
          go-version: default
          python-version: default
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Setup gcloud SDK
        uses: google-github-actions/setup-gcloud@v1
        with:
          project_id: apache-beam-testing
          service_account_key: ${{ secrets.GCP_SA_KEY }}
          export_default_credentials: true

      - name: Set writable gcloud config
        run: |
          mkdir -p "$RUNNER_TEMP/gcloud"
          echo "CLOUDSDK_CONFIG=$RUNNER_TEMP/gcloud" >> $GITHUB_ENV
      - name: Authenticate Docker with gcloud
        run: |
          gcloud auth configure-docker us.gcr.io --quiet
      - name: Write SA key and set GOOGLE_APPLICATION_CREDENTIALS
        run: |
          echo '${{ secrets.GCP_SA_KEY }}' > $HOME/sa.json
          echo "GOOGLE_APPLICATION_CREDENTIALS=$HOME/sa.json" >> $GITHUB_ENV
      - name: Build & push Java SDK harness container
        run: ./gradlew :runners:google-cloud-dataflow-java:buildAndPushDockerJavaContainer

      - name: Launch ExpansionService on 8097
        run: |
          nohup ./gradlew \
            :sdks:java:testing:expansion-service:run \
            --args="8097" \
            > expansion.log 2>&1 &
          # wait for the service to bind
          sleep 5

      - name: Run crossâ€‘language GoUsingJava Dataflow tests
        run: |
          ./gradlew \
            :runners:google-cloud-dataflow-java:validatesCrossLanguageRunnerGoUsingJava \
            --info \
            --stacktrace
        env:
          USER: github-actions
      
      - name: Archive JUnit Test Results
        uses: actions/upload-artifact@v4
        if: ${{ !success() }}
        with:
          name: JUnit Test Results
          path: "**/build/reports/tests/"
      - name: Publish JUnit Test Results
        uses: EnricoMi/publish-unit-test-result-action@v2
        if: always()
        with:
          commit: '${{ env.prsha || env.GITHUB_SHA }}'
          comment_mode: ${{ github.event_name == 'issue_comment'  && 'always' || 'off' }}
          files: '**/build/test-results/**/*.xml'
          large_files: true