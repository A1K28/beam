# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to You under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
# either express or implied.  See the License for the specific
# language governing permissions and limitations under the License.

name: PostCommit XVR GoUsingJava Dataflow • Fast path

on:
  pull_request_target:
    paths:
      - ".github/trigger_files/beam_PostCommit_XVR_GoUsingJava_Dataflow.json"
  workflow_dispatch:

permissions:
  actions: write
  pull-requests: write
  checks: write
  contents: read
  issues: write
  statuses: read

concurrency:
  group: '${{ github.workflow }}-${{ github.event.issue.number || github.sha || github.head_ref || github.ref }}'
  cancel-in-progress: true

env:
  DEVELOCITY_ACCESS_KEY: ${{ secrets.DEVELOCITY_ACCESS_KEY }}
  GRADLE_ENTERPRISE_CACHE_USERNAME: ${{ secrets.GE_CACHE_USERNAME }}
  GRADLE_ENTERPRISE_CACHE_PASSWORD: ${{ secrets.GE_CACHE_PASSWORD }}
  GCP_PROJECT: apache-beam-testing
  GCP_REGION: us-central1

jobs:
  xvr_go_java_fast:
    if: |
      github.event_name == 'workflow_dispatch' ||
      github.event_name == 'pull_request_target'
    runs-on: [self-hosted, ubuntu-20.04, main]
    timeout-minutes: 60

    steps:
      # ───────── Repository checkout ────────────────────────────────────────────
      - uses: actions/checkout@v4

      # ───────── Set up build tools and languages ──────────────────────────────
      - name: Setup environment (Java, Go, Python)
        uses: ./.github/actions/setup-environment-action
        with:
          java-version: default
          go-version: default
          python-version: default

      # ───────── Authenticate to GCP and Dataflow ──────────────────────────────
      - name: Set up gcloud SDK
        uses: google-github-actions/setup-gcloud@v1
        with:
          project_id: ${{ env.GCP_PROJECT }}
          service_account_key: ${{ secrets.GCP_SA_KEY }}
          export_default_credentials: true

      - name: Make gcloud config writable
        run: |
          mkdir -p "$RUNNER_TEMP/gcloud"
          echo "CLOUDSDK_CONFIG=$RUNNER_TEMP/gcloud" >> "$GITHUB_ENV"

      - name: Authenticate Docker with Artifact Registry
        run: gcloud auth configure-docker us.gcr.io --quiet

      - name: Write SA key file
        run: |
          echo '${{ secrets.GCP_SA_KEY }}' > "$HOME/sa.json"
          echo "GOOGLE_APPLICATION_CREDENTIALS=$HOME/sa.json" >> "$GITHUB_ENV"

      - name: Run TestXLang_Prefix on Dataflow
        env:
          GO111MODULE: "on"
        run: |
          # ── 1  Start expansion service in background ────────────────────────
          ./gradlew :sdks:java:testing:expansion-service:run --args="8097" \
            --no-daemon --parallel --max-workers=2 >expansion.log 2>&1 &
          EXP_PID=$!

          # ── 2  Wait (max 120 s) until port 8097 is listening ───────────────
          for i in $(seq 1 120); do
            nc -z localhost 8097 && echo "Expansion service ready" && break
            sleep 1
          done
          if ! nc -z localhost 8097; then
            echo "Expansion service failed to start; last 50 lines:" && tail -50 expansion.log
            kill $EXP_PID || true
            exit 1
          fi

          # ── 3  Run the single integration test inside the Go module root ───
          pushd sdks/go
          go test -v ./test/integration/xlang \
            -run '^TestXLang_Prefix$' \
            -runner=dataflow \
            --project ${GCP_PROJECT} \
            --region  ${GCP_REGION} \
            --expansion_addr=localhost:8097
          popd

          # ── 4  Shut down the expansion service ─────────────────────────────
          kill $EXP_PID || true

      # ───────── Upload test reports on failure ────────────────────────────────
      - name: Archive JUnit Test Results
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: JUnit Test Results
          path: "**/build/reports/tests/"

      - name: Publish JUnit Test Results
        if: always()
        uses: EnricoMi/publish-unit-test-result-action@v2
        with:
          commit: '${{ github.event.pull_request.head.sha || github.sha }}'
          comment_mode: ${{ github.event_name == 'issue_comment' && 'always' || 'off' }}
          files: '**/build/test-results/**/*.xml'
          large_files: true
